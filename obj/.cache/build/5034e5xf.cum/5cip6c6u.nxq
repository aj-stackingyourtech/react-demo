<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ComputeNodeOperations
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ComputeNodeOperations
   ">
    <meta name="generator" content="docfx 2.58.2.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="ComputeNodeOperations">
  
  
  <h1 id="ComputeNodeOperations" data-uid="ComputeNodeOperations">Class ComputeNodeOperations
  </h1>
  <div class="markdown level0 summary"><p>Class representing a ComputeNodeOperations.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <h4 id="ComputeNodeOperations__ctor" data-uid="ComputeNodeOperations.#ctor">ComputeNodeOperations(client)</h4>
  <div class="markdown level1 summary"><p>Create a ComputeNodeOperations.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">new ComputeNodeOperations(client)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">undefinedBatchServiceClient</span></td>
        <td><em>client</em></td>
        <td>
          <p>Reference to the service client.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h3 id="functions">Functions
  </h3>
  
  
  <h4 id="ComputeNodeOperations_addUserWithHttpOperationResponse" data-uid="ComputeNodeOperations#addUserWithHttpOperationResponse">addUserWithHttpOperationResponse(poolId, nodeId, user, options)</h4>
  <div class="markdown level1 summary"><p>Adds a user Account to the specified Compute Node.</p>
<p>You can add a user Account to a Compute Node only when it is in the idle or
running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function addUserWithHttpOperationResponse(poolId, nodeId, user, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the machine on which you want to create a
user Account.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>user</em></td>
        <td>
          <p>The user Account to be created.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">name</em></td>
                <td>
                  <p>The user name of the Account.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">boolean</span></td>
                <td><em class="text-break">isAdmin</em></td>
                <td>
                  <p>Whether the Account should be an
administrator on the Compute Node. The default value is false.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">expiryTime</em></td>
                <td>
                  <p>The time at which the Account should expire.
If omitted, the default is 1 day from the current time. For Linux Compute
Nodes, the expiryTime has a precision up to a day.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">password</em></td>
                <td>
                  <p>The password of the Account. The password is
required for Windows Compute Nodes (those created with
'cloudServiceConfiguration', or created with 'virtualMachineConfiguration'
using a Windows Image reference). For Linux Compute Nodes, the password can
optionally be specified along with the sshPublicKey property.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">sshPublicKey</em></td>
                <td>
                  <p>The SSH public key that can be used for
remote login to the Compute Node. The public key should be compatible with
OpenSSH encoding and should be base 64 encoded. This property can be
specified only for Linux Compute Nodes. If this is specified for a Windows
Compute Node, then the Batch service rejects the request; if you are calling
the REST API directly, the HTTP status code is 400 (Bad Request).</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeAddUserOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_addUser" data-uid="ComputeNodeOperations#addUser">addUser(poolId, nodeId, user, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Adds a user Account to the specified Compute Node.</p>
<p>You can add a user Account to a Compute Node only when it is in the idle or
running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function addUser(poolId, nodeId, user, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the machine on which you want to create a
user Account.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>user</em></td>
        <td>
          <p>The user Account to be created.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">name</em></td>
                <td>
                  <p>The user name of the Account.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">boolean</span></td>
                <td><em class="text-break">isAdmin</em></td>
                <td>
                  <p>Whether the Account should be an
administrator on the Compute Node. The default value is false.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">expiryTime</em></td>
                <td>
                  <p>The time at which the Account should expire.
If omitted, the default is 1 day from the current time. For Linux Compute
Nodes, the expiryTime has a precision up to a day.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">password</em></td>
                <td>
                  <p>The password of the Account. The password is
required for Windows Compute Nodes (those created with
'cloudServiceConfiguration', or created with 'virtualMachineConfiguration'
using a Windows Image reference). For Linux Compute Nodes, the password can
optionally be specified along with the sshPublicKey property.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">sshPublicKey</em></td>
                <td>
                  <p>The SSH public key that can be used for
remote login to the Compute Node. The public key should be compatible with
OpenSSH encoding and should be base 64 encoded. This property can be
specified only for Linux Compute Nodes. If this is specified for a Windows
Compute Node, then the Batch service rejects the request; if you are calling
the REST API directly, the HTTP status code is 400 (Bad Request).</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeAddUserOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_deleteUserWithHttpOperationResponse" data-uid="ComputeNodeOperations#deleteUserWithHttpOperationResponse">deleteUserWithHttpOperationResponse(poolId, nodeId, userName, options)</h4>
  <div class="markdown level1 summary"><p>Deletes a user Account from the specified Compute Node.</p>
<p>You can delete a user Account to a Compute Node only when it is in the idle
or running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function deleteUserWithHttpOperationResponse(poolId, nodeId, userName, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the machine on which you want to delete a
user Account.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>userName</em></td>
        <td>
          <p>The name of the user Account to delete.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeDeleteUserOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_deleteUser" data-uid="ComputeNodeOperations#deleteUser">deleteUser(poolId, nodeId, userName, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Deletes a user Account from the specified Compute Node.</p>
<p>You can delete a user Account to a Compute Node only when it is in the idle
or running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function deleteUser(poolId, nodeId, userName, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the machine on which you want to delete a
user Account.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>userName</em></td>
        <td>
          <p>The name of the user Account to delete.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeDeleteUserOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_updateUserWithHttpOperationResponse" data-uid="ComputeNodeOperations#updateUserWithHttpOperationResponse">updateUserWithHttpOperationResponse(poolId, nodeId, userName, nodeUpdateUserParameter, options)</h4>
  <div class="markdown level1 summary"><p>Updates the password and expiration time of a user Account on the
specified Compute Node.</p>
<p>This operation replaces of all the updatable properties of the Account. For
example, if the expiryTime element is not specified, the current value is
replaced with the default value, not left unmodified. You can update a user
Account on a Compute Node only when it is in the idle or running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function updateUserWithHttpOperationResponse(poolId, nodeId, userName, nodeUpdateUserParameter, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the machine on which you want to update a
user Account.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>userName</em></td>
        <td>
          <p>The name of the user Account to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>nodeUpdateUserParameter</em></td>
        <td>
          <p>The parameters for the request.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">password</em></td>
                <td>
                  <p>The password of the
Account. The password is required for Windows Compute Nodes (those created
with 'cloudServiceConfiguration', or created with
'virtualMachineConfiguration' using a Windows Image reference). For Linux
Compute Nodes, the password can optionally be specified along with the
sshPublicKey property. If omitted, any existing password is removed.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">expiryTime</em></td>
                <td>
                  <p>The time at which the
Account should expire. If omitted, the default is 1 day from the current
time. For Linux Compute Nodes, the expiryTime has a precision up to a day.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">sshPublicKey</em></td>
                <td>
                  <p>The SSH public key
that can be used for remote login to the Compute Node. The public key should
be compatible with OpenSSH encoding and should be base 64 encoded. This
property can be specified only for Linux Compute Nodes. If this is specified
for a Windows Compute Node, then the Batch service rejects the request; if
you are calling the REST API directly, the HTTP status code is 400 (Bad
Request). If omitted, any existing SSH public key is removed.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeUpdateUserOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_updateUser" data-uid="ComputeNodeOperations#updateUser">updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Updates the password and expiration time of a user Account on the
specified Compute Node.</p>
<p>This operation replaces of all the updatable properties of the Account. For
example, if the expiryTime element is not specified, the current value is
replaced with the default value, not left unmodified. You can update a user
Account on a Compute Node only when it is in the idle or running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the machine on which you want to update a
user Account.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>userName</em></td>
        <td>
          <p>The name of the user Account to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>nodeUpdateUserParameter</em></td>
        <td>
          <p>The parameters for the request.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">password</em></td>
                <td>
                  <p>The password of the
Account. The password is required for Windows Compute Nodes (those created
with 'cloudServiceConfiguration', or created with
'virtualMachineConfiguration' using a Windows Image reference). For Linux
Compute Nodes, the password can optionally be specified along with the
sshPublicKey property. If omitted, any existing password is removed.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">expiryTime</em></td>
                <td>
                  <p>The time at which the
Account should expire. If omitted, the default is 1 day from the current
time. For Linux Compute Nodes, the expiryTime has a precision up to a day.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">sshPublicKey</em></td>
                <td>
                  <p>The SSH public key
that can be used for remote login to the Compute Node. The public key should
be compatible with OpenSSH encoding and should be base 64 encoded. This
property can be specified only for Linux Compute Nodes. If this is specified
for a Windows Compute Node, then the Batch service rejects the request; if
you are calling the REST API directly, the HTTP status code is 400 (Bad
Request). If omitted, any existing SSH public key is removed.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeUpdateUserOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_getWithHttpOperationResponse" data-uid="ComputeNodeOperations#getWithHttpOperationResponse">getWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Gets information about the specified Compute Node.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node that you want to get
information about.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeGetOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_get" data-uid="ComputeNodeOperations#get">get(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Gets information about the specified Compute Node.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function get(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node that you want to get
information about.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeGetOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_rebootWithHttpOperationResponse" data-uid="ComputeNodeOperations#rebootWithHttpOperationResponse">rebootWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Restarts the specified Compute Node.</p>
<p>You can restart a Compute Node only if it is in an idle or running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function rebootWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node that you want to restart.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">nodeRebootOption</em></td>
                <td>
                  <p>When to reboot the Compute Node
and what to do with currently running Tasks. The default value is requeue.
Possible values include: 'requeue', 'terminate', 'taskCompletion',
'retainedData'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeRebootOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_reboot" data-uid="ComputeNodeOperations#reboot">reboot(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Restarts the specified Compute Node.</p>
<p>You can restart a Compute Node only if it is in an idle or running state.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function reboot(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node that you want to restart.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">nodeRebootOption</em></td>
                <td>
                  <p>When to reboot the Compute Node
and what to do with currently running Tasks. The default value is requeue.
Possible values include: 'requeue', 'terminate', 'taskCompletion',
'retainedData'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeRebootOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_reimageWithHttpOperationResponse" data-uid="ComputeNodeOperations#reimageWithHttpOperationResponse">reimageWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Reinstalls the operating system on the specified Compute Node.</p>
<p>You can reinstall the operating system on a Compute Node only if it is in an
idle or running state. This API can be invoked only on Pools created with
the cloud service configuration property.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function reimageWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node that you want to restart.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">nodeReimageOption</em></td>
                <td>
                  <p>When to reimage the Compute Node
and what to do with currently running Tasks. The default value is requeue.
Possible values include: 'requeue', 'terminate', 'taskCompletion',
'retainedData'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeReimageOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_reimage" data-uid="ComputeNodeOperations#reimage">reimage(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Reinstalls the operating system on the specified Compute Node.</p>
<p>You can reinstall the operating system on a Compute Node only if it is in an
idle or running state. This API can be invoked only on Pools created with
the cloud service configuration property.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function reimage(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node that you want to restart.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">nodeReimageOption</em></td>
                <td>
                  <p>When to reimage the Compute Node
and what to do with currently running Tasks. The default value is requeue.
Possible values include: 'requeue', 'terminate', 'taskCompletion',
'retainedData'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeReimageOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_disableSchedulingWithHttpOperationResponse" data-uid="ComputeNodeOperations#disableSchedulingWithHttpOperationResponse">disableSchedulingWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Disables Task scheduling on the specified Compute Node.</p>
<p>You can disable Task scheduling on a Compute Node only if its current
scheduling state is enabled.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function disableSchedulingWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node on which you want to
disable Task scheduling.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">nodeDisableSchedulingOption</em></td>
                <td>
                  <p>What to do with
currently running Tasks when disabling Task scheduling on the Compute Node.
The default value is requeue. Possible values include: 'requeue',
'terminate', 'taskCompletion'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeDisableSchedulingOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_disableScheduling" data-uid="ComputeNodeOperations#disableScheduling">disableScheduling(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Disables Task scheduling on the specified Compute Node.</p>
<p>You can disable Task scheduling on a Compute Node only if its current
scheduling state is enabled.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function disableScheduling(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node on which you want to
disable Task scheduling.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">nodeDisableSchedulingOption</em></td>
                <td>
                  <p>What to do with
currently running Tasks when disabling Task scheduling on the Compute Node.
The default value is requeue. Possible values include: 'requeue',
'terminate', 'taskCompletion'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeDisableSchedulingOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_enableSchedulingWithHttpOperationResponse" data-uid="ComputeNodeOperations#enableSchedulingWithHttpOperationResponse">enableSchedulingWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Enables Task scheduling on the specified Compute Node.</p>
<p>You can enable Task scheduling on a Compute Node only if its current
scheduling state is disabled</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function enableSchedulingWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node on which you want to
enable Task scheduling.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeEnableSchedulingOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_enableScheduling" data-uid="ComputeNodeOperations#enableScheduling">enableScheduling(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Enables Task scheduling on the specified Compute Node.</p>
<p>You can enable Task scheduling on a Compute Node only if its current
scheduling state is disabled</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function enableScheduling(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node on which you want to
enable Task scheduling.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeEnableSchedulingOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_getRemoteLoginSettingsWithHttpOperationResponse" data-uid="ComputeNodeOperations#getRemoteLoginSettingsWithHttpOperationResponse">getRemoteLoginSettingsWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Gets the settings required for remote login to a Compute Node.</p>
<p>Before you can remotely login to a Compute Node using the remote login
settings, you must create a user Account on the Compute Node. This API can
be invoked only on Pools created with the virtual machine configuration
property. For Pools created with a cloud service configuration, see the
GetRemoteDesktop API.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getRemoteLoginSettingsWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node for which to obtain the
remote login settings.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeGetRemoteLoginSettingsOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_getRemoteLoginSettings" data-uid="ComputeNodeOperations#getRemoteLoginSettings">getRemoteLoginSettings(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Gets the settings required for remote login to a Compute Node.</p>
<p>Before you can remotely login to a Compute Node using the remote login
settings, you must create a user Account on the Compute Node. This API can
be invoked only on Pools created with the virtual machine configuration
property. For Pools created with a cloud service configuration, see the
GetRemoteDesktop API.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getRemoteLoginSettings(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node for which to obtain the
remote login settings.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeGetRemoteLoginSettingsOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_getRemoteDesktopWithHttpOperationResponse" data-uid="ComputeNodeOperations#getRemoteDesktopWithHttpOperationResponse">getRemoteDesktopWithHttpOperationResponse(poolId, nodeId, options)</h4>
  <div class="markdown level1 summary"><p>Gets the Remote Desktop Protocol file for the specified Compute
Node.</p>
<p>Before you can access a Compute Node by using the RDP file, you must create
a user Account on the Compute Node. This API can only be invoked on Pools
created with a cloud service configuration. For Pools created with a virtual
machine configuration, see the GetRemoteLoginSettings API.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getRemoteDesktopWithHttpOperationResponse(poolId, nodeId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node for which you want to get
the Remote Desktop Protocol file.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeGetRemoteDesktopOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_getRemoteDesktop" data-uid="ComputeNodeOperations#getRemoteDesktop">getRemoteDesktop(poolId, nodeId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Gets the Remote Desktop Protocol file for the specified Compute
Node.</p>
<p>Before you can access a Compute Node by using the RDP file, you must create
a user Account on the Compute Node. This API can only be invoked on Pools
created with a cloud service configuration. For Pools created with a virtual
machine configuration, see the GetRemoteLoginSettings API.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getRemoteDesktop(poolId, nodeId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node for which you want to get
the Remote Desktop Protocol file.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeGetRemoteDesktopOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_uploadBatchServiceLogsWithHttpOperationResponse" data-uid="ComputeNodeOperations#uploadBatchServiceLogsWithHttpOperationResponse">uploadBatchServiceLogsWithHttpOperationResponse(poolId, nodeId, uploadBatchServiceLogsConfiguration, options)</h4>
  <div class="markdown level1 summary"><p>Upload Azure Batch service log files from the specified Compute
Node to Azure Blob Storage.</p>
<p>This is for gathering Azure Batch service log files in an automated fashion
from Compute Nodes if you are experiencing an error and wish to escalate to
Azure support. The Azure Batch service log files should be shared with Azure
support to aid in debugging issues with the Batch service.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function uploadBatchServiceLogsWithHttpOperationResponse(poolId, nodeId, uploadBatchServiceLogsConfiguration, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node from which you want to
upload the Azure Batch service log files.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>uploadBatchServiceLogsConfiguration</em></td>
        <td>
          <p>The Azure Batch service
log files upload configuration.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">containerUrl</em></td>
                <td>
                  <p>The URL of
the container within Azure Blob Storage to which to upload the Batch Service
log file(s). The URL must include a Shared Access Signature (SAS) granting
write permissions to the container. The SAS duration must allow enough time
for the upload to finish. The start time for SAS is optional and recommended
to not be specified.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">startTime</em></td>
                <td>
                  <p>The start of the
time range from which to upload Batch Service log file(s). Any log file
containing a log message in the time range will be uploaded. This means that
the operation might retrieve more logs than have been requested since the
entire log file is always uploaded, but the operation should not retrieve
fewer logs than have been requested.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">endTime</em></td>
                <td>
                  <p>The end of the
time range from which to upload Batch Service log file(s). Any log file
containing a log message in the time range will be uploaded. This means that
the operation might retrieve more logs than have been requested since the
entire log file is always uploaded, but the operation should not retrieve
fewer logs than have been requested. If omitted, the default is to upload
all logs available after the startTime.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeUploadBatchServiceLogsOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_uploadBatchServiceLogs" data-uid="ComputeNodeOperations#uploadBatchServiceLogs">uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Upload Azure Batch service log files from the specified Compute
Node to Azure Blob Storage.</p>
<p>This is for gathering Azure Batch service log files in an automated fashion
from Compute Nodes if you are experiencing an error and wish to escalate to
Azure support. The Azure Batch service log files should be shared with Azure
support to aid in debugging issues with the Batch service.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool that contains the Compute Node.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nodeId</em></td>
        <td>
          <p>The ID of the Compute Node from which you want to
upload the Azure Batch service log files.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>uploadBatchServiceLogsConfiguration</em></td>
        <td>
          <p>The Azure Batch service
log files upload configuration.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">containerUrl</em></td>
                <td>
                  <p>The URL of
the container within Azure Blob Storage to which to upload the Batch Service
log file(s). The URL must include a Shared Access Signature (SAS) granting
write permissions to the container. The SAS duration must allow enough time
for the upload to finish. The start time for SAS is optional and recommended
to not be specified.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">startTime</em></td>
                <td>
                  <p>The start of the
time range from which to upload Batch Service log file(s). Any log file
containing a log message in the time range will be uploaded. This means that
the operation might retrieve more logs than have been requested since the
entire log file is always uploaded, but the operation should not retrieve
fewer logs than have been requested.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">date</span></td>
                <td><em class="text-break">endTime</em></td>
                <td>
                  <p>The end of the
time range from which to upload Batch Service log file(s). Any log file
containing a log message in the time range will be uploaded. This means that
the operation might retrieve more logs than have been requested since the
entire log file is always uploaded, but the operation should not retrieve
fewer logs than have been requested. If omitted, the default is to upload
all logs available after the startTime.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeUploadBatchServiceLogsOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_listWithHttpOperationResponse" data-uid="ComputeNodeOperations#listWithHttpOperationResponse">listWithHttpOperationResponse(poolId, options)</h4>
  <div class="markdown level1 summary"><p>Lists the Compute Nodes in the specified Pool.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listWithHttpOperationResponse(poolId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool from which you want to list
Compute Nodes.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeListOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_list" data-uid="ComputeNodeOperations#list">list(poolId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists the Compute Nodes in the specified Pool.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function list(poolId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>poolId</em></td>
        <td>
          <p>The ID of the Pool from which you want to list
Compute Nodes.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeListOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_listNextWithHttpOperationResponse" data-uid="ComputeNodeOperations#listNextWithHttpOperationResponse">listNextWithHttpOperationResponse(nextPageLink, options)</h4>
  <div class="markdown level1 summary"><p>Lists the Compute Nodes in the specified Pool.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listNextWithHttpOperationResponse(nextPageLink, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeListNextOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="ComputeNodeOperations_listNext" data-uid="ComputeNodeOperations#listNext">listNext(nextPageLink, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists the Compute Nodes in the specified Pool.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listNext(nextPageLink, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">computeNodeListNextOptions</em></td>
                <td>
                  <p>Additional parameters
for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
                <h5>In This Article</h5>
                <div></div>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
