<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class Task
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class Task
   ">
    <meta name="generator" content="docfx 2.58.2.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="Task">
  
  
  <h1 id="Task" data-uid="Task">Class Task
  </h1>
  <div class="markdown level0 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Class representing a Task.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <h4 id="Task__ctor" data-uid="Task.#ctor">Task(client)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Create a Task.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">new Task(client)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">undefinedBatchServiceClient</span></td>
        <td><em>client</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Reference to the service client.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h3 id="functions">Functions
  </h3>
  
  
  <h4 id="Task_addWithHttpOperationResponse" data-uid="Task#addWithHttpOperationResponse">addWithHttpOperationResponse(jobId, task, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Adds a Task to the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">The maximum lifetime of a Task from addition to completion is 180 days. If a
Task has not completed within 180 days of being added it will be terminated
by the Batch service and left in whatever state it was in at that time.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function addWithHttpOperationResponse(jobId, task, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job to which the Task is to be added.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>task</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The Task to be added.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">id</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A string that uniquely identifies the Task within
the Job. The ID can contain any combination of alphanumeric characters
including hyphens and underscores, and cannot contain more than 64
characters. The ID is case-preserving and case-insensitive (that is, you may
not have two IDs within a Job that differ only by case).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">displayName</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A display name for the Task. The display
name need not be unique and can contain any Unicode characters up to a
maximum length of 1024.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">commandLine</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The command line of the Task. For
multi-instance Tasks, the command line is executed as the primary Task,
after the primary Task and all subtasks have finished executing the
coordination command line. The command line does not run under a shell, and
therefore cannot take advantage of shell features such as environment
variable expansion. If you want to take advantage of such features, you
should invoke the shell in the command line, for example using &quot;cmd /c
MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command
line refers to file paths, it should use a relative path (relative to the
Task working directory), or use the Batch provided environment variable
(<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables" sourcefile="yml/Task.yml" sourcestartlinenumber="11">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">containerSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The settings for the container
under which the Task runs. If the Pool that will run this Task has
containerConfiguration set, this must be set as well. If the Pool that will
run this Task doesn't have containerConfiguration set, this must not be set.
When this is specified, all directories recursively below the
AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are
mapped into the container, all Task environment variables are mapped into
the container, and the Task command line is executed in the container. Files
produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be
reflected to the host disk, meaning that Batch file APIs will not be able to
access those files.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">exitConditions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">How the Batch service should respond
when the Task completes.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">resourceFiles</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of files that the Batch service
will download to the Compute Node before running the command line. For
multi-instance Tasks, the resource files will only be downloaded to the
Compute Node on which the primary Task is executed. There is a maximum size
for the list of resource files.  When the max size is exceeded, the request
will fail and the response error code will be RequestEntityTooLarge. If this
occurs, the collection of ResourceFiles must be reduced in size. This can be
achieved using .zip files, Application Packages, or Docker Containers.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">outputFiles</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of files that the Batch service
will upload from the Compute Node after running the command line. For
multi-instance Tasks, the files will only be uploaded from the Compute Node
on which the primary Task is executed.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">environmentSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of environment variable
settings for the Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">affinityInfo</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A locality hint that can be used by the
Batch service to select a Compute Node on which to start the new Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The execution constraints that apply to
this Task. If you do not specify constraints, the maxTaskRetryCount is the
maxTaskRetryCount specified for the Job, the maxWallClockTime is infinite,
and the retentionTime is 7 days.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">userIdentity</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The user identity under which the Task
runs. If omitted, the Task runs as a non-administrative user unique to the
Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">multiInstanceSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">An object that indicates that
the Task is a multi-instance Task, and contains information about how to run
the multi-instance Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">dependsOn</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The Tasks that this Task depends on. This
Task will not be scheduled until all Tasks that it depends on have completed
successfully. If any of those Tasks fail and exhaust their retry counts,
this Task will never be scheduled. If the Job does not have
usesTaskDependencies set to true, and this element is present, the request
fails with error code TaskDependenciesNotSpecifiedOnJob.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">applicationPackageReferences</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of Packages that
the Batch service will deploy to the Compute Node before running the command
line. Application packages are downloaded and deployed to a shared
directory, not the Task working directory. Therefore, if a referenced
package is already on the Node, and is up to date, then it is not
re-downloaded; the existing copy on the Compute Node is used. If a
referenced Package cannot be installed, for example because the package has
been deleted or because download failed, the Task fails.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">authenticationTokenSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The settings for an
authentication token that the Task can use to perform Batch service
operations. If this property is set, the Batch service provides the Task
with an authentication token which can be used to authenticate Batch service
operations without requiring an Account access key. The token is provided
via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations
that the Task can carry out using the token depend on the settings. For
example, a Task can request Job permissions in order to add other Tasks to
the Job, or check the status of the Job or of other Tasks under the Job.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskAddOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_add" data-uid="Task#add">add(jobId, task, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Adds a Task to the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">The maximum lifetime of a Task from addition to completion is 180 days. If a
Task has not completed within 180 days of being added it will be terminated
by the Batch service and left in whatever state it was in at that time.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function add(jobId, task, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job to which the Task is to be added.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>task</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The Task to be added.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">id</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A string that uniquely identifies the Task within
the Job. The ID can contain any combination of alphanumeric characters
including hyphens and underscores, and cannot contain more than 64
characters. The ID is case-preserving and case-insensitive (that is, you may
not have two IDs within a Job that differ only by case).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">displayName</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A display name for the Task. The display
name need not be unique and can contain any Unicode characters up to a
maximum length of 1024.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">commandLine</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The command line of the Task. For
multi-instance Tasks, the command line is executed as the primary Task,
after the primary Task and all subtasks have finished executing the
coordination command line. The command line does not run under a shell, and
therefore cannot take advantage of shell features such as environment
variable expansion. If you want to take advantage of such features, you
should invoke the shell in the command line, for example using &quot;cmd /c
MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command
line refers to file paths, it should use a relative path (relative to the
Task working directory), or use the Batch provided environment variable
(<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables" sourcefile="yml/Task.yml" sourcestartlinenumber="11">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">containerSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The settings for the container
under which the Task runs. If the Pool that will run this Task has
containerConfiguration set, this must be set as well. If the Pool that will
run this Task doesn't have containerConfiguration set, this must not be set.
When this is specified, all directories recursively below the
AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are
mapped into the container, all Task environment variables are mapped into
the container, and the Task command line is executed in the container. Files
produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be
reflected to the host disk, meaning that Batch file APIs will not be able to
access those files.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">exitConditions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">How the Batch service should respond
when the Task completes.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">resourceFiles</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of files that the Batch service
will download to the Compute Node before running the command line. For
multi-instance Tasks, the resource files will only be downloaded to the
Compute Node on which the primary Task is executed. There is a maximum size
for the list of resource files.  When the max size is exceeded, the request
will fail and the response error code will be RequestEntityTooLarge. If this
occurs, the collection of ResourceFiles must be reduced in size. This can be
achieved using .zip files, Application Packages, or Docker Containers.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">outputFiles</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of files that the Batch service
will upload from the Compute Node after running the command line. For
multi-instance Tasks, the files will only be uploaded from the Compute Node
on which the primary Task is executed.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">environmentSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of environment variable
settings for the Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">affinityInfo</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A locality hint that can be used by the
Batch service to select a Compute Node on which to start the new Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The execution constraints that apply to
this Task. If you do not specify constraints, the maxTaskRetryCount is the
maxTaskRetryCount specified for the Job, the maxWallClockTime is infinite,
and the retentionTime is 7 days.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">userIdentity</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The user identity under which the Task
runs. If omitted, the Task runs as a non-administrative user unique to the
Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">multiInstanceSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">An object that indicates that
the Task is a multi-instance Task, and contains information about how to run
the multi-instance Task.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">dependsOn</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The Tasks that this Task depends on. This
Task will not be scheduled until all Tasks that it depends on have completed
successfully. If any of those Tasks fail and exhaust their retry counts,
this Task will never be scheduled. If the Job does not have
usesTaskDependencies set to true, and this element is present, the request
fails with error code TaskDependenciesNotSpecifiedOnJob.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">applicationPackageReferences</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A list of Packages that
the Batch service will deploy to the Compute Node before running the command
line. Application packages are downloaded and deployed to a shared
directory, not the Task working directory. Therefore, if a referenced
package is already on the Node, and is up to date, then it is not
re-downloaded; the existing copy on the Compute Node is used. If a
referenced Package cannot be installed, for example because the package has
been deleted or because download failed, the Task fails.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">authenticationTokenSettings</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The settings for an
authentication token that the Task can use to perform Batch service
operations. If this property is set, the Batch service provides the Task
with an authentication token which can be used to authenticate Batch service
operations without requiring an Account access key. The token is provided
via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations
that the Task can carry out using the token depend on the settings. For
example, a Task can request Job permissions in order to add other Tasks to
the Job, or check the status of the Job or of other Tasks under the Job.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskAddOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_listWithHttpOperationResponse" data-uid="Task#listWithHttpOperationResponse">listWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Lists all of the Tasks that are associated with the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">For multi-instance Tasks, information such as affinityId, executionInfo and
nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
information about subtasks.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskListOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_list" data-uid="Task#list">list(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Lists all of the Tasks that are associated with the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">For multi-instance Tasks, information such as affinityId, executionInfo and
nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
information about subtasks.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function list(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskListOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_addCollectionWithHttpOperationResponse" data-uid="Task#addCollectionWithHttpOperationResponse">addCollectionWithHttpOperationResponse(jobId, value, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Adds a collection of Tasks to the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">Note that each Task must have a unique ID. The Batch service may not return
the results for each Task in the same order the Tasks were submitted in this
request. If the server times out or the connection is closed during the
request, the request may have been partially or fully processed, or not at
all. In such cases, the user should re-issue the request. Note that it is up
to the user to correctly handle failures when re-issuing a request. For
example, you should use the same Task IDs during a retry so that if the
prior operation succeeded, the retry will not create extra Tasks
unexpectedly. If the response contains any Tasks which failed to add, a
client can retry the request. In a retry, it is most efficient to resubmit
only Tasks that failed to add, and to omit Tasks that were successfully
added on the first attempt. The maximum lifetime of a Task from addition to
completion is 180 days. If a Task has not completed within 180 days of being
added it will be terminated by the Batch service and left in whatever state
it was in at that time.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function addCollectionWithHttpOperationResponse(jobId, value, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job to which the Task collection is to
be added.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">array</span></td>
        <td><em>value</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The collection of Tasks to add. The maximum count of
Tasks is 100. The total serialized size of this collection must be less than
1MB. If it is greater than 1MB (for example if each Task has 100's of
resource files or environment variables), the request will fail with code
'RequestBodyTooLarge' and should be retried again with fewer Tasks.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskAddCollectionOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_addCollection" data-uid="Task#addCollection">addCollection(jobId, value, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Adds a collection of Tasks to the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">Note that each Task must have a unique ID. The Batch service may not return
the results for each Task in the same order the Tasks were submitted in this
request. If the server times out or the connection is closed during the
request, the request may have been partially or fully processed, or not at
all. In such cases, the user should re-issue the request. Note that it is up
to the user to correctly handle failures when re-issuing a request. For
example, you should use the same Task IDs during a retry so that if the
prior operation succeeded, the retry will not create extra Tasks
unexpectedly. If the response contains any Tasks which failed to add, a
client can retry the request. In a retry, it is most efficient to resubmit
only Tasks that failed to add, and to omit Tasks that were successfully
added on the first attempt. The maximum lifetime of a Task from addition to
completion is 180 days. If a Task has not completed within 180 days of being
added it will be terminated by the Batch service and left in whatever state
it was in at that time.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function addCollection(jobId, value, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job to which the Task collection is to
be added.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">array</span></td>
        <td><em>value</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The collection of Tasks to add. The maximum count of
Tasks is 100. The total serialized size of this collection must be less than
1MB. If it is greater than 1MB (for example if each Task has 100's of
resource files or environment variables), the request will fail with code
'RequestBodyTooLarge' and should be retried again with fewer Tasks.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskAddCollectionOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_deleteMethodWithHttpOperationResponse" data-uid="Task#deleteMethodWithHttpOperationResponse">deleteMethodWithHttpOperationResponse(jobId, taskId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Deletes a Task from the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">When a Task is deleted, all of the files in its directory on the Compute
Node where it ran are also deleted (regardless of the retention time). For
multi-instance Tasks, the delete Task operation applies synchronously to the
primary task; subtasks and their files are then deleted asynchronously in
the background.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function deleteMethodWithHttpOperationResponse(jobId, taskId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job from which to delete the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to delete.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskDeleteMethodOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_deleteMethod" data-uid="Task#deleteMethod">deleteMethod(jobId, taskId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Deletes a Task from the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">When a Task is deleted, all of the files in its directory on the Compute
Node where it ran are also deleted (regardless of the retention time). For
multi-instance Tasks, the delete Task operation applies synchronously to the
primary task; subtasks and their files are then deleted asynchronously in
the background.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function deleteMethod(jobId, taskId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job from which to delete the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to delete.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskDeleteMethodOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_getWithHttpOperationResponse" data-uid="Task#getWithHttpOperationResponse">getWithHttpOperationResponse(jobId, taskId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Gets information about the specified Task.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">For multi-instance Tasks, information such as affinityId, executionInfo and
nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
information about subtasks.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getWithHttpOperationResponse(jobId, taskId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job that contains the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to get information about.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskGetOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_get" data-uid="Task#get">get(jobId, taskId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Gets information about the specified Task.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">For multi-instance Tasks, information such as affinityId, executionInfo and
nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
information about subtasks.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function get(jobId, taskId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job that contains the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to get information about.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskGetOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_updateWithHttpOperationResponse" data-uid="Task#updateWithHttpOperationResponse">updateWithHttpOperationResponse(jobId, taskId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Updates the properties of the specified Task.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function updateWithHttpOperationResponse(jobId, taskId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job containing the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Constraints that apply to this Task.
If omitted, the Task is given the default constraints. For multi-instance
Tasks, updating the retention time applies only to the primary Task and not
subtasks.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskUpdateOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_update" data-uid="Task#update">update(jobId, taskId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Updates the properties of the specified Task.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function update(jobId, taskId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job containing the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Constraints that apply to this Task.
If omitted, the Task is given the default constraints. For multi-instance
Tasks, updating the retention time applies only to the primary Task and not
subtasks.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskUpdateOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_listSubtasksWithHttpOperationResponse" data-uid="Task#listSubtasksWithHttpOperationResponse">listSubtasksWithHttpOperationResponse(jobId, taskId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Lists all of the subtasks that are associated with the specified
multi-instance Task.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">If the Task is not a multi-instance Task then this returns an empty
collection.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listSubtasksWithHttpOperationResponse(jobId, taskId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskListSubtasksOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_listSubtasks" data-uid="Task#listSubtasks">listSubtasks(jobId, taskId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Lists all of the subtasks that are associated with the specified
multi-instance Task.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">If the Task is not a multi-instance Task then this returns an empty
collection.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listSubtasks(jobId, taskId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskListSubtasksOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_terminateWithHttpOperationResponse" data-uid="Task#terminateWithHttpOperationResponse">terminateWithHttpOperationResponse(jobId, taskId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Terminates the specified Task.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">When the Task has been terminated, it moves to the completed state. For
multi-instance Tasks, the terminate Task operation applies synchronously to
the primary task; subtasks are then terminated asynchronously in the
background.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function terminateWithHttpOperationResponse(jobId, taskId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job containing the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to terminate.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskTerminateOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_terminate" data-uid="Task#terminate">terminate(jobId, taskId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Terminates the specified Task.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">When the Task has been terminated, it moves to the completed state. For
multi-instance Tasks, the terminate Task operation applies synchronously to
the primary task; subtasks are then terminated asynchronously in the
background.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function terminate(jobId, taskId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job containing the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to terminate.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskTerminateOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_reactivateWithHttpOperationResponse" data-uid="Task#reactivateWithHttpOperationResponse">reactivateWithHttpOperationResponse(jobId, taskId, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Reactivates a Task, allowing it to run again even if its retry
count has been exhausted.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">Reactivation makes a Task eligible to be retried again up to its maximum
retry count. The Task's state is changed to active. As the Task is no longer
in the completed state, any previous exit code or failure information is no
longer available after reactivation. Each time a Task is reactivated, its
retry count is reset to 0. Reactivation will fail for Tasks that are not
completed or that previously completed successfully (with an exit code of
0). Additionally, it will fail if the Job has completed (or is terminating
or deleting).</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function reactivateWithHttpOperationResponse(jobId, taskId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job containing the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to reactivate.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskReactivateOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_reactivate" data-uid="Task#reactivate">reactivate(jobId, taskId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Reactivates a Task, allowing it to run again even if its retry
count has been exhausted.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">Reactivation makes a Task eligible to be retried again up to its maximum
retry count. The Task's state is changed to active. As the Task is no longer
in the completed state, any previous exit code or failure information is no
longer available after reactivation. Each time a Task is reactivated, its
retry count is reset to 0. Reactivation will fail for Tasks that are not
completed or that previously completed successfully (with an exit code of
0). Additionally, it will fail if the Job has completed (or is terminating
or deleting).</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function reactivate(jobId, taskId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Job containing the Task.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>taskId</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The ID of the Task to reactivate.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskReactivateOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_listNextWithHttpOperationResponse" data-uid="Task#listNextWithHttpOperationResponse">listNextWithHttpOperationResponse(nextPageLink, options)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Lists all of the Tasks that are associated with the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">For multi-instance Tasks, information such as affinityId, executionInfo and
nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
information about subtasks.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listNextWithHttpOperationResponse(nextPageLink, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskListNextOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Task_listNext" data-uid="Task#listNext">listNext(nextPageLink, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Lists all of the Tasks that are associated with the specified Job.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="3">For multi-instance Tasks, information such as affinityId, executionInfo and
nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
information about subtasks.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listNext(nextPageLink, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">taskListNextOptions</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p sourcefile="yml/Task.yml" sourcestartlinenumber="1">The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p sourcefile="yml/Task.yml" sourcestartlinenumber="1">If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p sourcefile="yml/Task.yml" sourcestartlinenumber="4">{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
                <h5>In This Article</h5>
                <div></div>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
