<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class Job
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class Job
   ">
    <meta name="generator" content="docfx 2.58.2.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="Job">
  
  
  <h1 id="Job" data-uid="Job">Class Job
  </h1>
  <div class="markdown level0 summary"><p>Class representing a Job.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <h4 id="Job__ctor" data-uid="Job.#ctor">Job(client)</h4>
  <div class="markdown level1 summary"><p>Create a Job.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">new Job(client)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">undefinedBatchServiceClient</span></td>
        <td><em>client</em></td>
        <td>
          <p>Reference to the service client.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h3 id="functions">Functions
  </h3>
  
  
  <h4 id="Job_getAllLifetimeStatisticsWithHttpOperationResponse" data-uid="Job#getAllLifetimeStatisticsWithHttpOperationResponse">getAllLifetimeStatisticsWithHttpOperationResponse(options)</h4>
  <div class="markdown level1 summary"><p>Gets lifetime summary statistics for all of the Jobs in the
specified Account.</p>
<p>Statistics are aggregated across all Jobs that have ever existed in the
Account, from Account creation to the last update time of the statistics.
The statistics may not be immediately available. The Batch service performs
periodic roll-up of statistics. The typical delay is about 30 minutes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getAllLifetimeStatisticsWithHttpOperationResponse(options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobGetAllLifetimeStatisticsOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_getAllLifetimeStatistics" data-uid="Job#getAllLifetimeStatistics">getAllLifetimeStatistics(options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Gets lifetime summary statistics for all of the Jobs in the
specified Account.</p>
<p>Statistics are aggregated across all Jobs that have ever existed in the
Account, from Account creation to the last update time of the statistics.
The statistics may not be immediately available. The Batch service performs
periodic roll-up of statistics. The typical delay is about 30 minutes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getAllLifetimeStatistics(options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobGetAllLifetimeStatisticsOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_deleteMethodWithHttpOperationResponse" data-uid="Job#deleteMethodWithHttpOperationResponse">deleteMethodWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p>Deletes a Job.</p>
<p>Deleting a Job also deletes all Tasks that are part of that Job, and all Job
statistics. This also overrides the retention period for Task data; that is,
if the Job contains Tasks which are still retained on Compute Nodes, the
Batch services deletes those Tasks' working directories and all their
contents.  When a Delete Job request is received, the Batch service sets the
Job to the deleting state. All update operations on a Job that is in
deleting state will fail with status code 409 (Conflict), with additional
information indicating that the Job is being deleted.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function deleteMethodWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to delete.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobDeleteMethodOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_deleteMethod" data-uid="Job#deleteMethod">deleteMethod(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Deletes a Job.</p>
<p>Deleting a Job also deletes all Tasks that are part of that Job, and all Job
statistics. This also overrides the retention period for Task data; that is,
if the Job contains Tasks which are still retained on Compute Nodes, the
Batch services deletes those Tasks' working directories and all their
contents.  When a Delete Job request is received, the Batch service sets the
Job to the deleting state. All update operations on a Job that is in
deleting state will fail with status code 409 (Conflict), with additional
information indicating that the Job is being deleted.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function deleteMethod(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to delete.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobDeleteMethodOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_getWithHttpOperationResponse" data-uid="Job#getWithHttpOperationResponse">getWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p>Gets information about the specified Job.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobGetOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_get" data-uid="Job#get">get(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Gets information about the specified Job.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function get(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobGetOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_patchWithHttpOperationResponse" data-uid="Job#patchWithHttpOperationResponse">patchWithHttpOperationResponse(jobId, jobPatchParameter, options)</h4>
  <div class="markdown level1 summary"><p>Updates the properties of the specified Job.</p>
<p>This replaces only the Job properties specified in the request. For example,
if the Job has constraints, and a request does not specify the constraints
element, then the Job keeps the existing constraints.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function patchWithHttpOperationResponse(jobId, jobPatchParameter, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job whose properties you want to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>jobPatchParameter</em></td>
        <td>
          <p>The parameters for the request.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">number</span></td>
                <td><em class="text-break">priority</em></td>
                <td>
                  <p>The priority of the Job.
Priority values can range from -1000 to 1000, with -1000 being the lowest
priority and 1000 being the highest priority. If omitted, the priority of
the Job is left unchanged.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onAllTasksComplete</em></td>
                <td>
                  <p>The action the Batch
service should take when all Tasks in the Job are in the completed state. If
omitted, the completion behavior is left unchanged. You may not change the
value from terminatejob to noaction - that is, once you have engaged
automatic Job termination, you cannot turn it off again. If you try to do
this, the request fails with an 'invalid property value' error response; if
you are calling the REST API directly, the HTTP status code is 400 (Bad
Request). Possible values include: 'noAction', 'terminateJob'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p>The execution constraints
for the Job. If omitted, the existing execution constraints are left
unchanged.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">poolInfo</em></td>
                <td>
                  <p>The Pool on which the Batch
service runs the Job's Tasks. You may change the Pool for a Job only when
the Job is disabled. The Patch Job call will fail if you include the
poolInfo element and the Job is not disabled. If you specify an
autoPoolSpecification in the poolInfo, only the keepAlive property of the
autoPoolSpecification can be updated, and then only if the
autoPoolSpecification has a poolLifetimeOption of Job (other job properties
can be updated as normal). If omitted, the Job continues to run on its
current Pool.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">metadata</em></td>
                <td>
                  <p>A list of name-value pairs
associated with the Job as metadata. If omitted, the existing Job metadata
is left unchanged.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobPatchOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_patch" data-uid="Job#patch">patch(jobId, jobPatchParameter, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Updates the properties of the specified Job.</p>
<p>This replaces only the Job properties specified in the request. For example,
if the Job has constraints, and a request does not specify the constraints
element, then the Job keeps the existing constraints.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function patch(jobId, jobPatchParameter, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job whose properties you want to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>jobPatchParameter</em></td>
        <td>
          <p>The parameters for the request.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">number</span></td>
                <td><em class="text-break">priority</em></td>
                <td>
                  <p>The priority of the Job.
Priority values can range from -1000 to 1000, with -1000 being the lowest
priority and 1000 being the highest priority. If omitted, the priority of
the Job is left unchanged.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onAllTasksComplete</em></td>
                <td>
                  <p>The action the Batch
service should take when all Tasks in the Job are in the completed state. If
omitted, the completion behavior is left unchanged. You may not change the
value from terminatejob to noaction - that is, once you have engaged
automatic Job termination, you cannot turn it off again. If you try to do
this, the request fails with an 'invalid property value' error response; if
you are calling the REST API directly, the HTTP status code is 400 (Bad
Request). Possible values include: 'noAction', 'terminateJob'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p>The execution constraints
for the Job. If omitted, the existing execution constraints are left
unchanged.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">poolInfo</em></td>
                <td>
                  <p>The Pool on which the Batch
service runs the Job's Tasks. You may change the Pool for a Job only when
the Job is disabled. The Patch Job call will fail if you include the
poolInfo element and the Job is not disabled. If you specify an
autoPoolSpecification in the poolInfo, only the keepAlive property of the
autoPoolSpecification can be updated, and then only if the
autoPoolSpecification has a poolLifetimeOption of Job (other job properties
can be updated as normal). If omitted, the Job continues to run on its
current Pool.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">metadata</em></td>
                <td>
                  <p>A list of name-value pairs
associated with the Job as metadata. If omitted, the existing Job metadata
is left unchanged.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobPatchOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_updateWithHttpOperationResponse" data-uid="Job#updateWithHttpOperationResponse">updateWithHttpOperationResponse(jobId, jobUpdateParameter, options)</h4>
  <div class="markdown level1 summary"><p>Updates the properties of the specified Job.</p>
<p>This fully replaces all the updatable properties of the Job. For example, if
the Job has constraints associated with it and if constraints is not
specified with this request, then the Batch service will remove the existing
constraints.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function updateWithHttpOperationResponse(jobId, jobUpdateParameter, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job whose properties you want to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>jobUpdateParameter</em></td>
        <td>
          <p>The parameters for the request.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">number</span></td>
                <td><em class="text-break">priority</em></td>
                <td>
                  <p>The priority of the Job.
Priority values can range from -1000 to 1000, with -1000 being the lowest
priority and 1000 being the highest priority. If omitted, it is set to the
default value 0.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p>The execution constraints
for the Job. If omitted, the constraints are cleared.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">poolInfo</em></td>
                <td>
                  <p>The Pool on which the Batch
service runs the Job's Tasks. You may change the Pool for a Job only when
the Job is disabled. The Update Job call will fail if you include the
poolInfo element and the Job is not disabled. If you specify an
autoPoolSpecification in the poolInfo, only the keepAlive property of the
autoPoolSpecification can be updated, and then only if the
autoPoolSpecification has a poolLifetimeOption of Job (other job properties
can be updated as normal).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">metadata</em></td>
                <td>
                  <p>A list of name-value pairs
associated with the Job as metadata. If omitted, it takes the default value
of an empty list; in effect, any existing metadata is deleted.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onAllTasksComplete</em></td>
                <td>
                  <p>The action the Batch
service should take when all Tasks in the Job are in the completed state. If
omitted, the completion behavior is set to noaction. If the current value is
terminatejob, this is an error because a Job's completion behavior may not
be changed from terminatejob to noaction. You may not change the value from
terminatejob to noaction - that is, once you have engaged automatic Job
termination, you cannot turn it off again. If you try to do this, the
request fails and Batch returns status code 400 (Bad Request) and an
'invalid property value' error response. If you do not specify this element
in a PUT request, it is equivalent to passing noaction. This is an error if
the current value is terminatejob. Possible values include: 'noAction',
'terminateJob'</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobUpdateOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_update" data-uid="Job#update">update(jobId, jobUpdateParameter, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Updates the properties of the specified Job.</p>
<p>This fully replaces all the updatable properties of the Job. For example, if
the Job has constraints associated with it and if constraints is not
specified with this request, then the Batch service will remove the existing
constraints.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function update(jobId, jobUpdateParameter, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job whose properties you want to update.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>jobUpdateParameter</em></td>
        <td>
          <p>The parameters for the request.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">number</span></td>
                <td><em class="text-break">priority</em></td>
                <td>
                  <p>The priority of the Job.
Priority values can range from -1000 to 1000, with -1000 being the lowest
priority and 1000 being the highest priority. If omitted, it is set to the
default value 0.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p>The execution constraints
for the Job. If omitted, the constraints are cleared.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">poolInfo</em></td>
                <td>
                  <p>The Pool on which the Batch
service runs the Job's Tasks. You may change the Pool for a Job only when
the Job is disabled. The Update Job call will fail if you include the
poolInfo element and the Job is not disabled. If you specify an
autoPoolSpecification in the poolInfo, only the keepAlive property of the
autoPoolSpecification can be updated, and then only if the
autoPoolSpecification has a poolLifetimeOption of Job (other job properties
can be updated as normal).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">metadata</em></td>
                <td>
                  <p>A list of name-value pairs
associated with the Job as metadata. If omitted, it takes the default value
of an empty list; in effect, any existing metadata is deleted.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onAllTasksComplete</em></td>
                <td>
                  <p>The action the Batch
service should take when all Tasks in the Job are in the completed state. If
omitted, the completion behavior is set to noaction. If the current value is
terminatejob, this is an error because a Job's completion behavior may not
be changed from terminatejob to noaction. You may not change the value from
terminatejob to noaction - that is, once you have engaged automatic Job
termination, you cannot turn it off again. If you try to do this, the
request fails and Batch returns status code 400 (Bad Request) and an
'invalid property value' error response. If you do not specify this element
in a PUT request, it is equivalent to passing noaction. This is an error if
the current value is terminatejob. Possible values include: 'noAction',
'terminateJob'</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobUpdateOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_disableWithHttpOperationResponse" data-uid="Job#disableWithHttpOperationResponse">disableWithHttpOperationResponse(jobId, disableTasks, options)</h4>
  <div class="markdown level1 summary"><p>Disables the specified Job, preventing new Tasks from running.</p>
<p>The Batch Service immediately moves the Job to the disabling state. Batch
then uses the disableTasks parameter to determine what to do with the
currently running Tasks of the Job. The Job remains in the disabling state
until the disable operation is completed and all Tasks have been dealt with
according to the disableTasks option; the Job then moves to the disabled
state. No new Tasks are started under the Job until it moves back to active
state. If you try to disable a Job that is in any state other than active,
disabling, or disabled, the request fails with status code 409.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function disableWithHttpOperationResponse(jobId, disableTasks, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to disable.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>disableTasks</em></td>
        <td>
          <p>What to do with active Tasks associated with
the Job. Possible values include: 'requeue', 'terminate', 'wait'</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobDisableOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_disable" data-uid="Job#disable">disable(jobId, disableTasks, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Disables the specified Job, preventing new Tasks from running.</p>
<p>The Batch Service immediately moves the Job to the disabling state. Batch
then uses the disableTasks parameter to determine what to do with the
currently running Tasks of the Job. The Job remains in the disabling state
until the disable operation is completed and all Tasks have been dealt with
according to the disableTasks option; the Job then moves to the disabled
state. No new Tasks are started under the Job until it moves back to active
state. If you try to disable a Job that is in any state other than active,
disabling, or disabled, the request fails with status code 409.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function disable(jobId, disableTasks, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to disable.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>disableTasks</em></td>
        <td>
          <p>What to do with active Tasks associated with
the Job. Possible values include: 'requeue', 'terminate', 'wait'</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobDisableOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_enableWithHttpOperationResponse" data-uid="Job#enableWithHttpOperationResponse">enableWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p>Enables the specified Job, allowing new Tasks to run.</p>
<p>When you call this API, the Batch service sets a disabled Job to the
enabling state. After the this operation is completed, the Job moves to the
active state, and scheduling of new Tasks under the Job resumes. The Batch
service does not allow a Task to remain in the active state for more than
180 days. Therefore, if you enable a Job containing active Tasks which were
added more than 180 days ago, those Tasks will not run.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function enableWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to enable.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobEnableOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_enable" data-uid="Job#enable">enable(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Enables the specified Job, allowing new Tasks to run.</p>
<p>When you call this API, the Batch service sets a disabled Job to the
enabling state. After the this operation is completed, the Job moves to the
active state, and scheduling of new Tasks under the Job resumes. The Batch
service does not allow a Task to remain in the active state for more than
180 days. Therefore, if you enable a Job containing active Tasks which were
added more than 180 days ago, those Tasks will not run.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function enable(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to enable.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobEnableOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_terminateWithHttpOperationResponse" data-uid="Job#terminateWithHttpOperationResponse">terminateWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p>Terminates the specified Job, marking it as completed.</p>
<p>When a Terminate Job request is received, the Batch service sets the Job to
the terminating state. The Batch service then terminates any running Tasks
associated with the Job and runs any required Job release Tasks. Then the
Job moves into the completed state. If there are any Tasks in the Job in the
active state, they will remain in the active state. Once a Job is
terminated, new Tasks cannot be added and any remaining active Tasks will
not be scheduled.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function terminateWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to terminate.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">terminateReason</em></td>
                <td>
                  <p>The text you want to appear as the
Job's TerminateReason. The default is 'UserTerminate'.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobTerminateOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_terminate" data-uid="Job#terminate">terminate(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Terminates the specified Job, marking it as completed.</p>
<p>When a Terminate Job request is received, the Batch service sets the Job to
the terminating state. The Batch service then terminates any running Tasks
associated with the Job and runs any required Job release Tasks. Then the
Job moves into the completed state. If there are any Tasks in the Job in the
active state, they will remain in the active state. Once a Job is
terminated, new Tasks cannot be added and any remaining active Tasks will
not be scheduled.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function terminate(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job to terminate.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">terminateReason</em></td>
                <td>
                  <p>The text you want to appear as the
Job's TerminateReason. The default is 'UserTerminate'.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobTerminateOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_addWithHttpOperationResponse" data-uid="Job#addWithHttpOperationResponse">addWithHttpOperationResponse(job, options)</h4>
  <div class="markdown level1 summary"><p>Adds a Job to the specified Account.</p>
<p>The Batch service supports two ways to control the work done as part of a
Job. In the first approach, the user specifies a Job Manager Task. The Batch
service launches this Task when it is ready to start the Job. The Job
Manager Task controls all other Tasks that run under this Job, by using the
Task APIs. In the second approach, the user directly controls the execution
of Tasks under an active Job, by using the Task APIs. Also note: when naming
Jobs, avoid including sensitive information such as user names or secret
project names. This information may appear in telemetry logs accessible to
Microsoft Support engineers.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function addWithHttpOperationResponse(job, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>job</em></td>
        <td>
          <p>The Job to be added.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">id</em></td>
                <td>
                  <p>A string that uniquely identifies the Job within the
Account. The ID can contain any combination of alphanumeric characters
including hyphens and underscores, and cannot contain more than 64
characters. The ID is case-preserving and case-insensitive (that is, you may
not have two IDs within an Account that differ only by case).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">displayName</em></td>
                <td>
                  <p>The display name for the Job. The display
name need not be unique and can contain any Unicode characters up to a
maximum length of 1024.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">number</span></td>
                <td><em class="text-break">priority</em></td>
                <td>
                  <p>The priority of the Job. Priority values can
range from -1000 to 1000, with -1000 being the lowest priority and 1000
being the highest priority. The default value is 0.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p>The execution constraints for the Job.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobManagerTask</em></td>
                <td>
                  <p>Details of a Job Manager Task to be
launched when the Job is started. If the Job does not specify a Job Manager
Task, the user must explicitly add Tasks to the Job. If the Job does specify
a Job Manager Task, the Batch service creates the Job Manager Task when the
Job is created, and will try to schedule the Job Manager Task before
scheduling other Tasks in the Job. The Job Manager Task's typical purpose is
to control and/or monitor Job execution, for example by deciding what
additional Tasks to run, determining when the work is complete, etc.
(However, a Job Manager Task is not restricted to these activities - it is a
fully-fledged Task in the system and perform whatever actions are required
for the Job.) For example, a Job Manager Task might download a file
specified as a parameter, analyze the contents of that file and submit
additional Tasks based on those contents.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobPreparationTask</em></td>
                <td>
                  <p>The Job Preparation Task. If a Job
has a Job Preparation Task, the Batch service will run the Job Preparation
Task on a Node before starting any Tasks of that Job on that Compute Node.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobReleaseTask</em></td>
                <td>
                  <p>The Job Release Task. A Job Release
Task cannot be specified without also specifying a Job Preparation Task for
the Job. The Batch service runs the Job Release Task on the Nodes that have
run the Job Preparation Task. The primary purpose of the Job Release Task is
to undo changes to Compute Nodes made by the Job Preparation Task. Example
activities include deleting local files, or shutting down services that were
started as part of Job preparation.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">commonEnvironmentSettings</em></td>
                <td>
                  <p>The list of common
environment variable settings. These environment variables are set for all
Tasks in the Job (including the Job Manager, Job Preparation and Job Release
Tasks). Individual Tasks can override an environment setting specified here
by specifying the same setting name with a different value.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">poolInfo</em></td>
                <td>
                  <p>The Pool on which the Batch service runs the
Job's Tasks.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onAllTasksComplete</em></td>
                <td>
                  <p>The action the Batch service should
take when all Tasks in the Job are in the completed state. Note that if a
Job contains no Tasks, then all Tasks are considered complete. This option
is therefore most commonly used with a Job Manager task; if you want to use
automatic Job termination without a Job Manager, you should initially set
onAllTasksComplete to noaction and update the Job properties to set
onAllTasksComplete to terminatejob once you have finished adding Tasks. The
default is noaction. Possible values include: 'noAction', 'terminateJob'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onTaskFailure</em></td>
                <td>
                  <p>The action the Batch service should take
when any Task in the Job fails. A Task is considered to have failed if has a
failureInfo. A failureInfo is set if the Task completes with a non-zero exit
code after exhausting its retry count, or if there was an error starting the
Task, for example due to a resource file download error. The default is
noaction. Possible values include: 'noAction', 'performExitOptionsJobAction'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">metadata</em></td>
                <td>
                  <p>A list of name-value pairs associated with the
Job as metadata. The Batch service does not assign any meaning to metadata;
it is solely for the use of user code.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">boolean</span></td>
                <td><em class="text-break">usesTaskDependencies</em></td>
                <td>
                  <p>Whether Tasks in the Job can
define dependencies on each other. The default is false.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">networkConfiguration</em></td>
                <td>
                  <p>The network configuration for the
Job.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobAddOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_add" data-uid="Job#add">add(job, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Adds a Job to the specified Account.</p>
<p>The Batch service supports two ways to control the work done as part of a
Job. In the first approach, the user specifies a Job Manager Task. The Batch
service launches this Task when it is ready to start the Job. The Job
Manager Task controls all other Tasks that run under this Job, by using the
Task APIs. In the second approach, the user directly controls the execution
of Tasks under an active Job, by using the Task APIs. Also note: when naming
Jobs, avoid including sensitive information such as user names or secret
project names. This information may appear in telemetry logs accessible to
Microsoft Support engineers.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function add(job, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>job</em></td>
        <td>
          <p>The Job to be added.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">id</em></td>
                <td>
                  <p>A string that uniquely identifies the Job within the
Account. The ID can contain any combination of alphanumeric characters
including hyphens and underscores, and cannot contain more than 64
characters. The ID is case-preserving and case-insensitive (that is, you may
not have two IDs within an Account that differ only by case).</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">displayName</em></td>
                <td>
                  <p>The display name for the Job. The display
name need not be unique and can contain any Unicode characters up to a
maximum length of 1024.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">number</span></td>
                <td><em class="text-break">priority</em></td>
                <td>
                  <p>The priority of the Job. Priority values can
range from -1000 to 1000, with -1000 being the lowest priority and 1000
being the highest priority. The default value is 0.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">constraints</em></td>
                <td>
                  <p>The execution constraints for the Job.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobManagerTask</em></td>
                <td>
                  <p>Details of a Job Manager Task to be
launched when the Job is started. If the Job does not specify a Job Manager
Task, the user must explicitly add Tasks to the Job. If the Job does specify
a Job Manager Task, the Batch service creates the Job Manager Task when the
Job is created, and will try to schedule the Job Manager Task before
scheduling other Tasks in the Job. The Job Manager Task's typical purpose is
to control and/or monitor Job execution, for example by deciding what
additional Tasks to run, determining when the work is complete, etc.
(However, a Job Manager Task is not restricted to these activities - it is a
fully-fledged Task in the system and perform whatever actions are required
for the Job.) For example, a Job Manager Task might download a file
specified as a parameter, analyze the contents of that file and submit
additional Tasks based on those contents.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobPreparationTask</em></td>
                <td>
                  <p>The Job Preparation Task. If a Job
has a Job Preparation Task, the Batch service will run the Job Preparation
Task on a Node before starting any Tasks of that Job on that Compute Node.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobReleaseTask</em></td>
                <td>
                  <p>The Job Release Task. A Job Release
Task cannot be specified without also specifying a Job Preparation Task for
the Job. The Batch service runs the Job Release Task on the Nodes that have
run the Job Preparation Task. The primary purpose of the Job Release Task is
to undo changes to Compute Nodes made by the Job Preparation Task. Example
activities include deleting local files, or shutting down services that were
started as part of Job preparation.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">commonEnvironmentSettings</em></td>
                <td>
                  <p>The list of common
environment variable settings. These environment variables are set for all
Tasks in the Job (including the Job Manager, Job Preparation and Job Release
Tasks). Individual Tasks can override an environment setting specified here
by specifying the same setting name with a different value.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">poolInfo</em></td>
                <td>
                  <p>The Pool on which the Batch service runs the
Job's Tasks.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onAllTasksComplete</em></td>
                <td>
                  <p>The action the Batch service should
take when all Tasks in the Job are in the completed state. Note that if a
Job contains no Tasks, then all Tasks are considered complete. This option
is therefore most commonly used with a Job Manager task; if you want to use
automatic Job termination without a Job Manager, you should initially set
onAllTasksComplete to noaction and update the Job properties to set
onAllTasksComplete to terminatejob once you have finished adding Tasks. The
default is noaction. Possible values include: 'noAction', 'terminateJob'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">string</span></td>
                <td><em class="text-break">onTaskFailure</em></td>
                <td>
                  <p>The action the Batch service should take
when any Task in the Job fails. A Task is considered to have failed if has a
failureInfo. A failureInfo is set if the Task completes with a non-zero exit
code after exhausting its retry count, or if there was an error starting the
Task, for example due to a resource file download error. The default is
noaction. Possible values include: 'noAction', 'performExitOptionsJobAction'</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">array</span></td>
                <td><em class="text-break">metadata</em></td>
                <td>
                  <p>A list of name-value pairs associated with the
Job as metadata. The Batch service does not assign any meaning to metadata;
it is solely for the use of user code.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">boolean</span></td>
                <td><em class="text-break">usesTaskDependencies</em></td>
                <td>
                  <p>Whether Tasks in the Job can
define dependencies on each other. The default is false.</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">networkConfiguration</em></td>
                <td>
                  <p>The network configuration for the
Job.</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobAddOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listWithHttpOperationResponse" data-uid="Job#listWithHttpOperationResponse">listWithHttpOperationResponse(options)</h4>
  <div class="markdown level1 summary"><p>Lists all of the Jobs in the specified Account.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listWithHttpOperationResponse(options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_list" data-uid="Job#list">list(options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists all of the Jobs in the specified Account.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function list(options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listFromJobScheduleWithHttpOperationResponse" data-uid="Job#listFromJobScheduleWithHttpOperationResponse">listFromJobScheduleWithHttpOperationResponse(jobScheduleId, options)</h4>
  <div class="markdown level1 summary"><p>Lists the Jobs that have been created under the specified Job
Schedule.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listFromJobScheduleWithHttpOperationResponse(jobScheduleId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobScheduleId</em></td>
        <td>
          <p>The ID of the Job Schedule from which you want
to get a list of Jobs.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListFromJobScheduleOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listFromJobSchedule" data-uid="Job#listFromJobSchedule">listFromJobSchedule(jobScheduleId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists the Jobs that have been created under the specified Job
Schedule.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listFromJobSchedule(jobScheduleId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobScheduleId</em></td>
        <td>
          <p>The ID of the Job Schedule from which you want
to get a list of Jobs.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListFromJobScheduleOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listPreparationAndReleaseTaskStatusWithHttpOperationResponse" data-uid="Job#listPreparationAndReleaseTaskStatusWithHttpOperationResponse">listPreparationAndReleaseTaskStatusWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p>Lists the execution status of the Job Preparation and Job Release
Task for the specified Job across the Compute Nodes where the Job has run.</p>
<p>This API returns the Job Preparation and Job Release Task status on all
Compute Nodes that have run the Job Preparation or Job Release Task. This
includes Compute Nodes which have since been removed from the Pool. If this
API is invoked on a Job which has no Job Preparation or Job Release Task,
the Batch service returns HTTP status code 409 (Conflict) with an error code
of JobPreparationTaskNotSpecified.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listPreparationAndReleaseTaskStatusWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListPreparationAndReleaseTaskStatusOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listPreparationAndReleaseTaskStatus" data-uid="Job#listPreparationAndReleaseTaskStatus">listPreparationAndReleaseTaskStatus(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists the execution status of the Job Preparation and Job Release
Task for the specified Job across the Compute Nodes where the Job has run.</p>
<p>This API returns the Job Preparation and Job Release Task status on all
Compute Nodes that have run the Job Preparation or Job Release Task. This
includes Compute Nodes which have since been removed from the Pool. If this
API is invoked on a Job which has no Job Preparation or Job Release Task,
the Batch service returns HTTP status code 409 (Conflict) with an error code
of JobPreparationTaskNotSpecified.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listPreparationAndReleaseTaskStatus(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListPreparationAndReleaseTaskStatusOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_getTaskCountsWithHttpOperationResponse" data-uid="Job#getTaskCountsWithHttpOperationResponse">getTaskCountsWithHttpOperationResponse(jobId, options)</h4>
  <div class="markdown level1 summary"><p>Gets the Task counts for the specified Job.</p>
<p>Task counts provide a count of the Tasks by active, running or completed
Task state, and a count of Tasks which succeeded or failed. Tasks in the
preparing state are counted as running.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getTaskCountsWithHttpOperationResponse(jobId, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobGetTaskCountsOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_getTaskCounts" data-uid="Job#getTaskCounts">getTaskCounts(jobId, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Gets the Task counts for the specified Job.</p>
<p>Task counts provide a count of the Tasks by active, running or completed
Task state, and a count of Tasks which succeeded or failed. Tasks in the
preparing state are counted as running.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function getTaskCounts(jobId, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>jobId</em></td>
        <td>
          <p>The ID of the Job.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobGetTaskCountsOptions</em></td>
                <td>
                  <p>Additional parameters for
the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listNextWithHttpOperationResponse" data-uid="Job#listNextWithHttpOperationResponse">listNextWithHttpOperationResponse(nextPageLink, options)</h4>
  <div class="markdown level1 summary"><p>Lists all of the Jobs in the specified Account.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listNextWithHttpOperationResponse(nextPageLink, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListNextOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listNext" data-uid="Job#listNext">listNext(nextPageLink, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists all of the Jobs in the specified Account.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listNext(nextPageLink, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListNextOptions</em></td>
                <td>
                  <p>Additional parameters for the
operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listFromJobScheduleNextWithHttpOperationResponse" data-uid="Job#listFromJobScheduleNextWithHttpOperationResponse">listFromJobScheduleNextWithHttpOperationResponse(nextPageLink, options)</h4>
  <div class="markdown level1 summary"><p>Lists the Jobs that have been created under the specified Job
Schedule.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listFromJobScheduleNextWithHttpOperationResponse(nextPageLink, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListFromJobScheduleNextOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listFromJobScheduleNext" data-uid="Job#listFromJobScheduleNext">listFromJobScheduleNext(nextPageLink, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists the Jobs that have been created under the specified Job
Schedule.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listFromJobScheduleNext(nextPageLink, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListFromJobScheduleNextOptions</em></td>
                <td>
                  <p>Additional
parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listPreparationAndReleaseTaskStatusNextWithHttpOperationResponse" data-uid="Job#listPreparationAndReleaseTaskStatusNextWithHttpOperationResponse">listPreparationAndReleaseTaskStatusNextWithHttpOperationResponse(nextPageLink, options)</h4>
  <div class="markdown level1 summary"><p>Lists the execution status of the Job Preparation and Job Release
Task for the specified Job across the Compute Nodes where the Job has run.</p>
<p>This API returns the Job Preparation and Job Release Task status on all
Compute Nodes that have run the Job Preparation or Job Release Task. This
includes Compute Nodes which have since been removed from the Pool. If this
API is invoked on a Job which has no Job Preparation or Job Release Task,
the Batch service returns HTTP status code 409 (Conflict) with an error code
of JobPreparationTaskNotSpecified.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listPreparationAndReleaseTaskStatusNextWithHttpOperationResponse(nextPageLink, options)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListPreparationAndReleaseTaskStatusNextOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">Promise</span></td>
        <td><p>A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <h4 id="Job_listPreparationAndReleaseTaskStatusNext" data-uid="Job#listPreparationAndReleaseTaskStatusNext">listPreparationAndReleaseTaskStatusNext(nextPageLink, options, optionalCallback)</h4>
  <div class="markdown level1 summary"><p>Lists the execution status of the Job Preparation and Job Release
Task for the specified Job across the Compute Nodes where the Job has run.</p>
<p>This API returns the Job Preparation and Job Release Task status on all
Compute Nodes that have run the Job Preparation or Job Release Task. This
includes Compute Nodes which have since been removed from the Pool. If this
API is invoked on a Job which has no Job Preparation or Job Release Task,
the Batch service returns HTTP status code 409 (Conflict) with an error code
of JobPreparationTaskNotSpecified.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-js hljs">function listPreparationAndReleaseTaskStatusNext(nextPageLink, options, optionalCallback)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">string</span></td>
        <td><em>nextPageLink</em></td>
        <td>
          <p>The NextLink from the previous successful call
to List operation.</p>

          
        </td>
      </tr>
      <tr>
        <td><span class="xref">object</span></td>
        <td><em>options</em></td>
        <td>
          <p>Optional Parameters.</p>

          
          <h6 class="parameters">Properties</h6>
          <table class="table table-bordered table-striped table-condensed">
            <thead>
              <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">jobListPreparationAndReleaseTaskStatusNextOptions</em></td>
                <td>
                  <p>Additional parameters for the operation</p>

                        </td>
              </tr>
              <tr>
                <td><span class="xref">object</span></td>
                <td><em class="text-break">customHeaders</em></td>
                <td>
                  <p>Headers that will be added to the
request</p>

                        </td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
      <tr>
        <td><span class="xref">function</span></td>
        <td><em>optionalCallback</em></td>
        <td>
          <p>The optional callback.</p>

          
        </td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">function</span></td>
        <td><p>If a callback was passed as the last parameter
then it returns the callback else returns a Promise.</p>
<p>{Promise} A promise is returned</p>
</td>
      </tr>
    </tbody>
  </table>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
                <h5>In This Article</h5>
                <div></div>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
